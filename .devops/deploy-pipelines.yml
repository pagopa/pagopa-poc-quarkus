# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: 'ubuntu-22.04'

parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply. Use only buildNumber or skip for manual deployment"
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip
    default: skip
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: TEST
    displayName: Run integration tests
    type: boolean
    default: true

variables:
  imageRepository: '$(IMAGE_REPOSITORY)'
  nameSpace: '$(K8S_NAMESPACE)'

  ${{ if eq(parameters['ENV'], 'dev') }}:
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY)
    dockerRegistryFqdn: $(DEV_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-dev-linux'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_DEV)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_DEV)"
    pocReportingEnrollmentSubKey: "$(DEV_POC_ENROLLMENT_SUB_KEY)"


  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    sourceBranch: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    sourceBranch: ${{ variables['Build.SourceBranchName'] }}



resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v3.1.0
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a release on GitHub
  - stage: Release
    jobs:
      - job: make_release
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - ${{ if ne(parameters.SEMVER, 'skip') }}:
              - template: templates/maven-github-release/template.yaml@pagopaCommons
                parameters:
                  release_branch: $(sourceBranch)
                  gitEmail: $(GIT_EMAIL)
                  gitUsername: $(GIT_USERNAME)
                  gitHubConnection: $(GITHUB_CONNECTION)
                  ${{ if ne(parameters.SEMVER, 'skip') }}:
                    semver: '${{ parameters.SEMVER }}'
                  ${{ if eq(parameters.SEMVER, 'skip') }}:
                    semver: 'buildNumber' # this case is impossible due to main condition, but it is necessary to work property

          - template: templates/maven-github-current-version/template.yaml@pagopaCommons

  # Build and Push Docker Image
  - stage: Build
    dependsOn: Release
    variables:
      current_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
    jobs:
      - job: "build"
        steps:
          - checkout: self
            persistCredentials: true

          - script: |
              git checkout $(sourceBranch)
            displayName: Checkout and update branch

          - ${{ if eq(parameters.FORCE_REPLACE_DOCKER_IMAGE, true) }}:
            - script: |
                mvn clean package
              displayName: Building package

          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(dockerRegistryServiceConnection)
              CONTAINER_REGISTRY_FQDN: $(dockerRegistryFqdn)
              DOCKER_IMAGE_NAME: $(imageRepository)
              DOCKER_IMAGE_TAG: $(current_version)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}

#  # Testing the docker image
#  - stage: Smoke_Test
#    dependsOn:
#      - Build
#    condition: and(succeeded(), eq('${{ parameters.TEST }}', 'true'))
#    jobs:
#      - job: smoke_tests
#        steps:
#          - checkout: self
#            persistCredentials: true
#
#          - script: |
#              git checkout $(sourceBranch)
#            displayName: Checkout and update branch
#
#          - task: Docker@2
#            displayName: "Docker login"
#            inputs:
#              containerRegistry: "$(dockerRegistryServiceConnection)"
#              command: "login"
#
#          - task: Bash@3
#            displayName: 'Run Smoke Tests'
#            inputs:
#              targetType: 'inline'
#              script: |
#                cd ./integration-test
#                sh run_integration_test.sh local
#            env:
#              containerRegistry: $(dockerRegistryFqdn)

  # Deploy on K8s with Helm
  - stage: Deploy
    dependsOn:
      - Release
      - Build
    variables:
      deploy_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
    jobs:
      - deployment: "deploy"
        pool:
          name: $(poolImage)
        environment: ${{ parameters['ENV'] }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  persistCredentials: true

                - script: |
                    git checkout $(sourceBranch)
                  displayName: Checkout and update branch

                - template: templates/helm-microservice-chart-setup/template.yaml@pagopaCommons
                  parameters:
                    DEPLOY_VERSION: $(deploy_version)

                - template: templates/helm-microservice-chart-deploy/template.yaml@pagopaCommons
                  parameters:
                    DO_DEPLOY: true
                    ENV: ${{ parameters['ENV'] }}
                    KUBERNETES_SERVICE_CONN: ${{ variables.kubernetesServiceConnection }}
                    NAMESPACE: $(nameSpace)
                    APP_NAME: $(imageRepository)
                    VALUE_FILE: "helm/values-${{ parameters['ENV'] }}.yaml"
                    DEPLOY_VERSION: $(deploy_version)
                    APPINSIGHTS_SERVICE_CONN: ${{ variables.appInsightsServiceConn }}
                    APPINSIGHTS_RESOURCE_ID: ${{ variables.appInsightsResourceId }}


  # Run Tests
  - stage: Integration_Test
    dependsOn:
      - Deploy
    condition: and(and(succeeded(), eq('${{ parameters.TEST }}', 'true')), ne('${{ parameters.ENV }}', 'prod'))
    jobs:
      - job: integration_tests
        steps:
          - checkout: self
            persistCredentials: true

          - script: |
              git checkout $(sourceBranch)
            displayName: Checkout and update branch

          - task: Bash@3
            displayName: 'Run Integration Tests'
            inputs:
              targetType: 'inline'
              script: |
                cd ./integration-test/src
                export ORG_ENROLLMENT_SUBSCRIPTION_KEY=${{ variables.pocReportingEnrollmentSubKey }}
                yarn install
                yarn test:${{ parameters.ENV }}